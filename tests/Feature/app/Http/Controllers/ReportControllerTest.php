<?php

namespace Tests\Feature\app\Http\Controllers;

use App\Enums\TypeUserEnum;
use App\Models\Document;
use App\Models\Group;
use App\Models\Meeting;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;
use Tests\Feature\Utils\LoginUsersTrait;
use Tests\TestCase;

class ReportControllerTest extends TestCase
{
    use DatabaseTransactions;
    use LoginUsersTrait;

    const BASE_URL = 'api/groups';

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->artisan('db:seed --class=TypeGroupSeeder');
        $this->artisan('db:seed --class=TypeUserSeeder');
        $this->artisan('db:seed --class=UserSeeder');
    }

    public function testShouldDownloadByIdWithFiles()
    {
        $this->login(TypeUserEnum::VIEWER);

        $fileAta = UploadedFile::fake()->create('file.pdf');
        $fileAta =  Storage::disk('local')->put('atas', $fileAta);
        $fileDocs = UploadedFile::fake()->create('file.pdf');
        $fileDocs =  Storage::disk('local')->put('docs', $fileDocs);

        $group = Group::factory()->create();
        Meeting::factory()->create(['ata' => $fileAta, 'group_id' => $group->id]);
        Document::factory()->create(['file' => $fileDocs, 'group_id' => $group->id]);

        $zipName = 'documento' . $group->id . '.zip';
        $response = $this->json('GET', sprintf('%s/%s/download/', self::BASE_URL, $group->id), ['filters' => ['withFiles' => true]]);

        $response->assertStatus(200);
        $response->assertHeader('Content-Disposition', "attachment; filename=$zipName");
        $response->assertHeader('Content-Type', 'application/zip');
    }

    public function testShouldDownloadByIdWithoutFiles()
    {
        $this->login(TypeUserEnum::VIEWER);

        $group = Group::factory()->create();

        $response = $this->json('GET', sprintf('%s/%s/download/', self::BASE_URL, $group->id), ['filters' => ['withFiles' => false]]);

        $response->assertStatus(200);
        $response->assertHeader('Content-Type', 'application/pdf');
    }

    public function testShouldDownloadMany()
    {
        $this->login(TypeUserEnum::VIEWER);

        $group = Group::factory(2)->create();

        $response = $this->json('GET', sprintf('%s/download/', self::BASE_URL), ['filters' => ['withFiles' => false]]);

        $response->assertStatus(200);
        $response->assertHeader('Content-Type', 'application/pdf');
    }

    public function testShouldDownloadByStatus()
    {
        $this->login(TypeUserEnum::VIEWER);

        Group::factory(2)->create(['status' => 'EM ANDAMENTO']);

        $response = $this->json(
            'GET',
            sprintf('%s/download/', self::BASE_URL),
            [
                'filters' => [
                    'withFiles' => false,
                    'status'    => 'EM ANDAMENTO',
                ],
            ]
        );

        $response->assertStatus(200);
        $response->assertHeader('Content-Type', 'application/pdf');
    }

    public function testShouldDownloadByDate()
    {
        $this->login(TypeUserEnum::VIEWER);

        Group::factory(3)->create();

        $response = $this->json(
            'GET',
            sprintf('%s/download/', self::BASE_URL),
            [
                'filters' => [
                    'withFiles' => false,
                    'startDate' => Carbon::now()->format('Y-m-d'),
                    'endDate'   => Carbon::now()->addDay()->format('Y-m-d'),
                ],
            ]
        );

        $response->assertStatus(200);
        $response->assertHeader('Content-Type', 'application/pdf');
    }

    public function testShouldDownloadByDateAndStatus()
    {
        $this->login(TypeUserEnum::VIEWER);

        Group::factory(3)->create(['status' => 'EM ANDAMENTO']);

        $response = $this->json(
            'GET',
            sprintf('%s/download/', self::BASE_URL),
            [
                'filters' => [
                    'withFiles' => false,
                    'startDate' => Carbon::now()->format('Y-m-d'),
                    'endDate'   => Carbon::now()->addDay()->format('Y-m-d'),
                    'status'    => 'EM ANDAMENTO',
                ],
            ]
        );

        $response->assertStatus(200);
        $response->assertHeader('Content-Type', 'application/pdf');
    }

    public function testShouldDownloadWhenNotFound()
    {
        $this->login(TypeUserEnum::VIEWER);

        $response = $this->json(
            'GET',
            sprintf('%s/download/', self::BASE_URL),
            [
                'filters' => [
                    'withFiles' => false,
                ],
            ]
        );

        $response->assertStatus(404);
        $this->assertEquals('Não encontrado nenhum grupo para o relatório.', json_decode($response->getContent(), true)['errors']);
    }
}
