<?php

namespace Tests\Feature\app\Http\Controllers;

use App\Enums\TypeUserEnum;
use App\Models\Representative;
use App\Models\Meeting;
use App\Models\Group;
use App\Models\TypeUser;
use App\Models\User;
use Faker\Factory as FakerFactory;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Storage;
use Tests\Feature\Utils\LoginUsersTrait;
use Tests\TestCase;

class MeetingControllerTest extends TestCase
{
    use DatabaseTransactions;
    use LoginUsersTrait;

    const BASE_URL = 'api/groups';

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->faker = FakerFactory::create();
        $this->artisan('db:seed --class=TypeGroupSeeder');
        $this->artisan('db:seed --class=TypeUserSeeder');
        $this->artisan('db:seed --class=UserSeeder');
    }

    public function testShouldListAll()
    {
        $group = Group::factory()->create();
        Meeting::factory(['group_id' => $group->id])->create();
        Meeting::factory(['group_id' => $group->id])->create();

        $this->login(TypeUserEnum::REPRESENTATIVE);

        $response = $this->get(sprintf('%s/%s/meeting-history', self::BASE_URL, $group->id));

        $response->assertStatus(200);
        $this->assertCount(2, json_decode($response->getContent(), true));
    }

    public function testShouldListOne()
    {
        $group = Group::factory()->create();
        $meeting = Meeting::factory(['group_id' => $group->id])->create();
        $this->login(TypeUserEnum::REPRESENTATIVE);

        $response = $this->get(sprintf('%s/%s/meeting-history/%s', self::BASE_URL, $group->id, $meeting->id));

        $response->assertStatus(200);
        $response->assertJsonStructure($this->getJsonStructure());
    }

    public function testNotShouldListOneWhenNotFoundMeeting()
    {
        $group = Group::factory()->create();
        $this->login(TypeUserEnum::REPRESENTATIVE);

        $response = $this->get(sprintf('%s/%s/meeting-history/%s', self::BASE_URL, $group->id, 100));

        $response->assertStatus(404);
        $this->assertEquals('Reunião não encontrada', json_decode($response->getContent(), true)['errors']);
    }

    public function testShouldCreateIsRepresentative()
    {
        $userRepresentative = $this->login(TypeUserEnum::REPRESENTATIVE);
        $representative = Representative::factory(['user_id' => $userRepresentative->id])->create();
        $group = Group::factory(['representative_id' => $representative->id])->create();

        $payload = [
            'content'   => 'teste teste',
            'summary'   => $this->faker->text,
            'ata'       => UploadedFile::fake()->create('ata.pdf'),
            'date_meet' => '2024-01-01',
        ];

        $response = $this->post(sprintf('%s/%s/meeting-history', self::BASE_URL, $group->id), $payload);

        $response->assertStatus(201);
        $response->assertJsonStructure(['ata']);
        $response = json_decode($response->getContent(), true);
        $this->assertDatabaseHas('meetings', $response);
    }

    public function testShouldCreateIsAdmin()
    {
        $userAdmin = $this->login(TypeUserEnum::ADMIN);
        $representative = Representative::factory(['user_id' => $userAdmin->id])->create();
        $group = Group::factory(['representative_id' => $representative->id])->create();

        $payload = [
            'content'   => 'teste teste',
            'summary'   => $this->faker->text,
            'ata'       => UploadedFile::fake()->create('ata.pdf'),
            'date_meet' => '2024-01-01',
        ];

        $response = $this->post(sprintf('%s/%s/meeting-history', self::BASE_URL, $group->id), $payload);

        $response->assertStatus(201);
        $response->assertJsonStructure(['ata']);
        $response = json_decode($response->getContent(), true);
        $this->assertDatabaseHas('meetings', $response);
    }

    public function testShouldNotCreateWhenGroupNotFound()
    {
        $userRepresentative = $this->login(TypeUserEnum::REPRESENTATIVE);
        $representative = Representative::factory(['user_id' => $userRepresentative->id])->create();
        $group = Group::factory(['representative_id' => $representative->id])->create();

        $payload = [
            'content'   => 'tetstststs',
            'summary'   => $this->faker->text,
            'ata'       => UploadedFile::fake()->create('ata.pdf'),
            'date_meet' => '2024-01-01',
        ];

        $response = $this->post(sprintf('%s/%s/meeting-history', self::BASE_URL, 100), $payload);

        $response->assertStatus(404);
        $this->assertEquals('Grupo não encontrado', json_decode($response->getContent(), true)['errors']);
    }

    public function testShouldNotCreateWhenIsNotTheRepresentativeOfGroup()
    {
        $typeUser = TypeUser::where('name', TypeUserEnum::REPRESENTATIVE)->first();
        $this->login(TypeUserEnum::REPRESENTATIVE);
        $user1 = User::factory(['type_user_id' => $typeUser->id])->create();
        $representative = Representative::factory(['user_id' => $user1->id])->create();
        $group = Group::factory(['representative_id' => $representative->id])->create();

        $payload = [
            'content'   => 'tetstststs',
            'summary'   => $this->faker->text,
            'ata'       => UploadedFile::fake()->create('ata.pdf'),
            'date_meet' => '2024-01-01',
        ];

        $response = $this->post(sprintf('%s/%s/meeting-history', self::BASE_URL, $group->id), $payload);

        $response->assertStatus(403);
        $this->assertEquals('This action is unauthorized.', json_decode($response->getContent(), true)['errors']);
    }

    public function testShouldUpdateIsRepresentative()
    {
        $userRepresentative = $this->login(TypeUserEnum::REPRESENTATIVE);
        $representative = Representative::factory(['user_id' => $userRepresentative->id])->create();
        $group = Group::factory(['representative_id' => $representative->id])->create();
        $meeting = Meeting::factory(['group_id' => $group->id])->create();

        $payload = [
            'content' => $this->faker->text,
            'ata'     => UploadedFile::fake()->create('file.pdf'),
        ];

        $response = $this->put(sprintf('%s/%s/meeting-history/%s', self::BASE_URL, $group->id, $meeting->id), $payload);

        $response->assertStatus(200);
        $response->assertJsonStructure(['ata']);
        $response = json_decode($response->getContent(), true);
        $this->assertDatabaseHas('meetings', $response);
    }

    public function testShouldUpdateIsAdmin()
    {
        $userAdmin = $this->login(TypeUserEnum::ADMIN);
        $representative = Representative::factory(['user_id' => $userAdmin->id])->create();
        $group = Group::factory(['representative_id' => $representative->id])->create();
        $meeting = Meeting::factory(['group_id' => $group->id])->create();

        $payload = [
            'content' => $this->faker->text,
            'ata'     => UploadedFile::fake()->create('file.pdf'),
        ];

        $response = $this->put(sprintf('%s/%s/meeting-history/%s', self::BASE_URL, $group->id, $meeting->id), $payload);

        $response->assertStatus(200);
        $response->assertJsonStructure(['ata']);
        $response = json_decode($response->getContent(), true);
        $this->assertDatabaseHas('meetings', $response);
    }

    public function testShouldNotUpdateWhenMeetingNotFound()
    {
        $userRepresentative = $this->login(TypeUserEnum::REPRESENTATIVE);
        $representative = Representative::factory(['user_id' => $userRepresentative->id])->create();
        $group = Group::factory(['representative_id' => $representative->id])->create();

        $payload = [
            'summary' => $this->faker->text,
        ];

        $response = $this->put(sprintf('%s/%s/meeting-history/%s', self::BASE_URL, $group->id, 100), $payload);

        $actual = json_decode($response->getContent(), true);

        $response->assertStatus(404);
        $this->assertEquals('Reunião não encontrada', json_decode($response->getContent(), true)['errors']);
    }

    public function testShouldNotUpdateWhenIsNotTheRepresentativeOfGroup()
    {
        $typeUser = TypeUser::where('name', TypeUserEnum::REPRESENTATIVE)->first();
        $this->login(TypeUserEnum::REPRESENTATIVE);
        $user1 = User::factory(['type_user_id' => $typeUser->id])->create();
        $representative = Representative::factory(['user_id' => $user1->id])->create();
        $group = Group::factory(['representative_id' => $representative->id])->create();
        $meeting = Meeting::factory(['group_id' => $group->id])->create();

        $payload = [
            'summary' => $this->faker->text,
        ];

        $response = $this->put(sprintf('%s/%s/meeting-history/%s', self::BASE_URL, $group->id, $meeting->id), $payload);

        $response->assertStatus(403);
        $this->assertEquals('This action is unauthorized.', json_decode($response->getContent(), true)['errors']);
    }

    public function testShouldDeleteIsRepresentative()
    {
        $userRepresentative = $this->login(TypeUserEnum::REPRESENTATIVE);
        $representative = Representative::factory(['user_id' => $userRepresentative->id])->create();
        $group = Group::factory(['representative_id' => $representative->id])->create();
        $meeting = Meeting::factory(['group_id' => $group->id])->create();

        $response = $this->delete(sprintf('%s/%s/meeting-history/%s', self::BASE_URL, $group->id, $meeting->id));

        $response->assertStatus(204);
        $this->assertDatabaseMissing('meetings', $meeting->toArray());
    }

    public function testShouldDeleteIsAdmin()
    {
        $userAdmin = $this->login(TypeUserEnum::ADMIN);
        $representative = Representative::factory(['user_id' => $userAdmin->id])->create();
        $group = Group::factory(['representative_id' => $representative->id])->create();
        $meeting = Meeting::factory(['group_id' => $group->id])->create();

        $response = $this->delete(sprintf('%s/%s/meeting-history/%s', self::BASE_URL, $group->id, $meeting->id));

        $response->assertStatus(204);
        $this->assertDatabaseMissing('meetings', $meeting->toArray());
    }

    public function testShouldNotDeleteWhenGroupNotFound()
    {
        $userRepresentative = $this->login(TypeUserEnum::REPRESENTATIVE);
        $representative = Representative::factory(['user_id' => $userRepresentative->id])->create();
        $group = Group::factory(['representative_id' => $representative->id])->create();
        $meeting = Meeting::factory(['group_id' => $group->id])->create();

        $response = $this->delete(sprintf('%s/%s/meeting-history/%s', self::BASE_URL, 100, $meeting->id));

        $response->assertStatus(404);
        $this->assertEquals('Grupo não encontrado', json_decode($response->getContent(), true)['errors']);
    }

    public function testShouldNotDeleteWhenMeetingNotFound()
    {
        $userRepresentative = $this->login(TypeUserEnum::REPRESENTATIVE);
        $representative = Representative::factory(['user_id' => $userRepresentative->id])->create();
        $group = Group::factory(['representative_id' => $representative->id])->create();

        $response = $this->delete(sprintf('%s/%s/meeting-history/%s', self::BASE_URL, $group->id, 100));

        $response->assertStatus(404);
        $this->assertEquals('Reunião não encontrada', json_decode($response->getContent(), true)['errors']);
    }

    public function testShouldNotDeleteWhenIsNotTheRepresentativeOfGroup()
    {
        $typeUser = TypeUser::where('name', TypeUserEnum::REPRESENTATIVE)->first();
        $this->login(TypeUserEnum::REPRESENTATIVE);
        $user1 = User::factory(['type_user_id' => $typeUser->id])->create();
        $representative = Representative::factory(['user_id' => $user1->id])->create();
        $group = Group::factory(['representative_id' => $representative->id])->create();
        $meeting = Meeting::factory(['group_id' => $group->id])->create();

        $response = $this->delete(sprintf('%s/%s/meeting-history/%s', self::BASE_URL, $group->id, $meeting->id));

        $response->assertStatus(403);
        $this->assertEquals('This action is unauthorized.', json_decode($response->getContent(), true)['errors']);
    }

    public function testShouldDownload()
    {
        $this->login(TypeUserEnum::VIEWER);
        $file = UploadedFile::fake()->create('file.pdf');
        $file =  Storage::disk('local')->put('atas', $file);

        $group = Group::factory()->create();
        $meeting = Meeting::factory()->create(['ata' => $file, 'group_id' => $group->id]);

        $response = $this->get(sprintf('%s/%s/meeting-history/%s/download/', self::BASE_URL, $group->id, $meeting->id));

        $response->assertStatus(200);
        Storage::disk('local')->delete($file);
    }

    private function getJsonStructure(): array
    {
        return [
            'id',
            'content',
            'summary',
            'ata',
            'group_id',
            'created_at',
            'updated_at',
        ];
    }
}
