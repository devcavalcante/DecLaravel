<?php

namespace Tests\Feature\app\Http\Controllers;

use App\Enums\ColorsEnum;
use App\Enums\TypeUserEnum;
use App\Models\GroupHasRepresentative;
use App\Models\Group;
use App\Models\Note;
use App\Models\TypeUser;
use App\Models\User;
use Faker\Factory as FakerFactory;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Support\Arr;
use Tests\Feature\Utils\LoginUsersTrait;
use Tests\TestCase;

class NoteControllerTest extends TestCase
{
    use DatabaseTransactions;
    use LoginUsersTrait;

    const BASE_URL = 'api/notes';

    public function setUp(): void
    {
        $this->faker = FakerFactory::create();
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testShouldListAll()
    {
        $group = Group::factory()->create();
        Note::factory(['group_id' => $group->id])->create();
        Note::factory(['group_id' => $group->id])->create();

        $this->login(TypeUserEnum::REPRESENTATIVE);

        $response = $this->get(self::BASE_URL);

        $response->assertStatus(200);
        $this->assertCount(2, json_decode($response->getContent(), true));
    }

    public function testShouldListOne()
    {
        $group = Group::factory()->create();
        $note = Note::factory(['group_id' => $group->id])->create();
        $this->login(TypeUserEnum::REPRESENTATIVE);

        $response = $this->get(sprintf('%s/%s', self::BASE_URL, $note->id));

        $response->assertStatus(200);
        $response->assertJsonStructure($this->getJsonStructure());
    }

    public function testNotShouldListOneWhenNotFoundNote()
    {
        $this->login(TypeUserEnum::REPRESENTATIVE);

        $response = $this->get(sprintf('%s/%s', self::BASE_URL, 100));

        $response->assertStatus(404);
        $this->assertEquals('Nota não encontrada', json_decode($response->getContent(), true)['errors']);
    }

    public function testShouldCreate()
    {
        $userRepresentative = $this->login(TypeUserEnum::REPRESENTATIVE);
        $group = Group::factory()->create();
        GroupHasRepresentative::factory(['group_id' => $group->id, 'user_id' => $userRepresentative->id])->create();

        $payload = [
            'title'       => 'teste teste',
            'description' => $this->faker->text,
            'color'       => ColorsEnum::GREEN,
        ];

        $response = $this->post(sprintf('/api/group/%s/notes', $group->id), $payload);

        $response->assertStatus(201);
        $this->assertDatabaseHas('notes', array_merge($payload, ['group_id' => $group->id]));
    }

    public function testShouldNotCreateWhenGroupNotFound()
    {
        $userRepresentative = $this->login(TypeUserEnum::REPRESENTATIVE);
        $group = Group::factory()->create();
        GroupHasRepresentative::factory(['group_id' => $group->id, 'user_id' => $userRepresentative->id])->create();

        $payload = [
            'title'        => 'teste teste',
            'description' => $this->faker->text,
            'color'       => ColorsEnum::YELLOW,
        ];

        $response = $this->post(sprintf('/api/group/%s/notes', 100), $payload);

        $response->assertStatus(404);
        $this->assertEquals('Grupo não encontrado', json_decode($response->getContent(), true)['errors']);
    }


    public function testShouldNotCreateWhenIsNotTheRepresentativeOfGroup()
    {
        $typeUser = TypeUser::where('name', TypeUserEnum::REPRESENTATIVE)->first();
        $this->login(TypeUserEnum::REPRESENTATIVE);
        $user1 = User::factory(['type_user_id' => $typeUser->id])->create();
        $group = Group::factory()->create();
        GroupHasRepresentative::factory(['group_id' => $group->id, 'user_id' => $user1->id])->create();

        $payload = [
            'title'        => 'teste teste',
            'description' => $this->faker->text,
            'color'       => ColorsEnum::YELLOW,
        ];

        $response = $this->post(sprintf('/api/group/%s/notes', $group->id), $payload);

        $response->assertStatus(403);
        $this->assertEquals('This action is unauthorized.', json_decode($response->getContent(), true)['errors']);
    }

    public function testShouldUpdate()
    {
        $userRepresentative = $this->login(TypeUserEnum::REPRESENTATIVE);
        $group = Group::factory()->create();
        GroupHasRepresentative::factory(['group_id' => $group->id, 'user_id' => $userRepresentative->id])->create();
        $note = Note::factory(['group_id' => $group->id])->create();

        $payload = [
            'title' => 'teste 2',
        ];

        $response = $this->put(sprintf('%s/%s', self::BASE_URL, $note->id), $payload);

        $actual = json_decode($response->getContent(), true);

        $response->assertStatus(200);
        $this->assertEquals($payload, Arr::only($actual, ['title']));
    }

    public function testShouldNotUpdateWhenNoteNotFound()
    {
        $userRepresentative = $this->login(TypeUserEnum::REPRESENTATIVE);
        $group = Group::factory()->create();
        GroupHasRepresentative::factory(['group_id' => $group->id, 'user_id' => $userRepresentative->id])->create();

        $payload = [
            'title' => 'teste ajskajska',
        ];

        $response = $this->put(sprintf('api/notes/%s', 100), $payload);

        $response->assertStatus(404);
        $this->assertEquals('Nota não encontrada', json_decode($response->getContent(), true)['errors']);
    }

    public function testShouldNotUpdateWhenIsNotTheRepresentativeOfGroup()
    {
        $typeUser = TypeUser::where('name', TypeUserEnum::REPRESENTATIVE)->first();
        $this->login(TypeUserEnum::REPRESENTATIVE);
        $user1 = User::factory(['type_user_id' => $typeUser->id])->create();
        $group = Group::factory()->create();
        GroupHasRepresentative::factory(['group_id' => $group->id, 'user_id' => $user1->id])->create();
        $note = Note::factory(['group_id' => $group->id])->create();

        $payload = [
            'description' => $this->faker->text,
        ];

        $response = $this->put(sprintf('api/notes/%s', $note->id), $payload);

        $response->assertStatus(403);
        $this->assertEquals('This action is unauthorized.', json_decode($response->getContent(), true)['errors']);
    }

    public function testShouldDelete()
    {
        $userRepresentative = $this->login(TypeUserEnum::REPRESENTATIVE);
        $group = Group::factory()->create();
        GroupHasRepresentative::factory(['group_id' => $group->id, 'user_id' => $userRepresentative->id])->create();
        $note = Note::factory(['group_id' => $group->id])->create();

        $response = $this->delete(sprintf('api/group/%s/notes/%s', $group->id, $note->id));

        $response->assertStatus(204);
        $this->assertDatabaseMissing('notes', $note->toArray());
    }

    public function testShouldNotDeleteWhenGroupNotFound()
    {
        $userRepresentative = $this->login(TypeUserEnum::REPRESENTATIVE);
        $group = Group::factory()->create();
        GroupHasRepresentative::factory(['group_id' => $group->id, 'user_id' => $userRepresentative->id])->create();
        $note = Note::factory(['group_id' => $group->id])->create();

        $response = $this->delete(sprintf('api/group/%s/notes/%s', 100, $note->id));

        $response->assertStatus(404);
        $this->assertEquals('Grupo não encontrado', json_decode($response->getContent(), true)['errors']);
    }

    public function testShouldNotDeleteWhenNoteNotFound()
    {
        $userRepresentative = $this->login(TypeUserEnum::REPRESENTATIVE);
        $group = Group::factory()->create();
        GroupHasRepresentative::factory(['group_id' => $group->id, 'user_id' => $userRepresentative->id])->create();

        $response = $this->delete(sprintf('api/group/%s/notes/%s', $group->id, 100));

        $response->assertStatus(404);
        $this->assertEquals('Nota não encontrada', json_decode($response->getContent(), true)['errors']);
    }

    public function testShouldNotDeleteWhenIsNotTheRepresentativeOfGroup()
    {
        $typeUser = TypeUser::where('name', TypeUserEnum::REPRESENTATIVE)->first();
        $this->login(TypeUserEnum::REPRESENTATIVE);
        $user1 = User::factory(['type_user_id' => $typeUser->id])->create();
        $group = Group::factory()->create();
        GroupHasRepresentative::factory(['group_id' => $group->id, 'user_id' => $user1->id])->create();
        $note = Note::factory(['group_id' => $group->id])->create();

        $response = $this->delete(sprintf('api/group/%s/notes/%s', $group->id, $note->id));

        $response->assertStatus(403);
        $this->assertEquals('This action is unauthorized.', json_decode($response->getContent(), true)['errors']);
    }

    private function getJsonStructure(): array
    {
        return [
            'id',
            'title',
            'description',
            'color',
            'group_id',
            'created_at',
            'updated_at',
        ];
    }
}
