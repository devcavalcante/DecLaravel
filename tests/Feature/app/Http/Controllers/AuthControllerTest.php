<?php

namespace Tests\Feature\app\Http\Controllers;

use App\Models\User;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Arr;
use Tests\TestCase;

class AuthControllerTest extends TestCase
{
    use DatabaseTransactions;

    public const BASE_URL = 'api/users';

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->artisan('migrate');
        $this->artisan('passport:install');
    }

    public function testShouldCreate()
    {
        $payload = [
            'name' => 'Test Name',
            'email' => 'teste@email.com',
            'password' => '12345678',
            'c_password' => '12345678',
        ];

        $response = $this->postJson(sprintf('%s/register', self::BASE_URL), $payload);
        $actual = json_decode($response->getContent(), true);
        $this->assertEquals(Arr::only($payload, ['name', 'email']), Arr::only($actual, ['name', 'email']));
        $this->assertEquals(201, $response->getStatusCode());
    }

    public function testShouldNotCreateWhenValidationErrors()
    {
        $payload = [
            'name' => 'Test Name',
            'email' => 'teste',
            'password' => '12345678',
            'c_password' => '12345678',
        ];

        $response = $this->postJson(sprintf('%s/register', self::BASE_URL), $payload);
        $actual = json_decode($response->getContent(), true);
        $this->assertEquals(422, $response->getStatusCode());
        $this->assertEquals('Email invalido.', Arr::first($actual['errors']['email']));
    }

    public function testShouldNotCreateWhenUserExists()
    {
        $payload = [
            'name' => 'Test Name',
            'email' => 'teste@email.com',
            'password' => '12345678',
        ];
        User::factory($payload)->create();

        $response = $this->postJson(sprintf('%s/register', self::BASE_URL), $payload);

        $this->assertEquals(401, $response->getStatusCode());
        $this->assertEquals('Usuario ja existe', $response->getContent());
    }

    public function testShouldLogin()
    {
        $payload = [
            'name' => 'Test Name',
            'email' => 'teste@email.com',
            'password' => '12345678',
        ];

        User::factory($payload)->create();
        $response = $this->postJson(sprintf('%s/login', self::BASE_URL), ['email' => $payload['email'], 'password' => $payload['password']]);
        $this->assertEquals(200, $response->getStatusCode());
    }
}
